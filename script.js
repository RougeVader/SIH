document.addEventListener('DOMContentLoaded', () => {
    const stateSelect = document.getElementById('state-select');
    const citySelect = document.getElementById('city-select');
    const submitCropButton = document.getElementById('submit-crop');
    const plantedCropInput = document.getElementById('planted-crop');
    const nextStepsDiv = document.getElementById('next-steps');
    const languageSelect = document.getElementById('language-select');
    const weatherDataContainer = document.getElementById('weather-data');
    const recommendationDataContainer = document.getElementById('recommendation-data');

    // IMPORTANT: Add your OpenWeatherMap API key here
    const apiKey = "4fe2178b56af6cfe166e09ed346d46dd";

    const translations = {
        en: {
            title: "AgroWeather India",
            subtitle: "Your trusted partner in farming",
            select_location: "ЁЯУН Select Your Location",
            select_state: "Select State",
            select_city: "Select City",
            live_weather: "тШАя╕П Live Weather Report",
            select_location_weather: "Select a location to see the weather.",
            crop_recommendation: "ЁЯМ▒ Crop Recommendation",
            crop_suggestions: "Weather-based crop suggestions will appear here.",
            your_crop_info: "ЁЯМ╛ Your Crop Information",
            what_crop: "What crop have you planted?",
            get_advice: "Get Advice",
            fetching_weather: "Fetching weather...",
            recommended_crops: "Recommended Crops for Current Weather:",
            no_crops: "No specific crop recommendations for the current weather."
        },
        hi: {
            title: "рдПрдЧреНрд░реЛрд╡реЗрджрд░ рдЗрдВрдбрд┐рдпрд╛",
            subtitle: "рдЦреЗрддреА рдореЗрдВ рдЖрдкрдХрд╛ рд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рд╕рд╛рдереА",
            select_location: "ЁЯУН рдЕрдкрдирд╛ рд╕реНрдерд╛рди рдЪреБрдиреЗрдВ",
            select_state: "рд░рд╛рдЬреНрдп рдЪреБрдиреЗрдВ",
            select_city: "рд╢рд╣рд░ рдЪреБрдиреЗрдВ",
            live_weather: "тШАя╕П рд▓рд╛рдЗрд╡ рдореМрд╕рдо рд░рд┐рдкреЛрд░реНрдЯ",
            select_location_weather: "рдореМрд╕рдо рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рд╕реНрдерд╛рди рдЪреБрдиреЗрдВред",
            crop_recommendation: "ЁЯМ▒ рдлрд╕рд▓ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢",
            crop_suggestions: "рдореМрд╕рдо рдЖрдзрд╛рд░рд┐рдд рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡ рдпрд╣рд╛рдВ рджрд┐рдЦрд╛рдИ рджреЗрдВрдЧреЗред",
            your_crop_info: "ЁЯМ╛ рдЖрдкрдХреА рдлрд╕рд▓ рдХреА рдЬрд╛рдирдХрд╛рд░реА",
            what_crop: "рдЖрдкрдиреЗ рдХреМрди рд╕реА рдлрд╕рд▓ рд▓рдЧрд╛рдИ рд╣реИ?",
            get_advice: "рд╕рд▓рд╛рд╣ рд▓реЗрдВ",
            fetching_weather: "рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА рд▓реА рдЬрд╛ рд░рд╣реА рд╣реИ...",
            recommended_crops: "рд╡рд░реНрддрдорд╛рди рдореМрд╕рдо рдХреЗ рд▓рд┐рдП рдЕрдиреБрд╢рдВрд╕рд┐рдд рдлрд╕рд▓реЗрдВ:",
            no_crops: "рд╡рд░реНрддрдорд╛рди рдореМрд╕рдо рдХреЗ рд▓рд┐рдП рдХреЛрдИ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдлрд╕рд▓ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдирд╣реАрдВ рд╣реИрдВред"
        },
        bn: { // Bengali
            title: "ржПржЧрзНрж░рзЛржУржпрж╝рзЗржжрж╛рж░ ржЗржирзНржбрж┐ржпрж╝рж╛",
            subtitle: "ржЪрж╛рж╖рзЗ ржЖржкржирж╛рж░ ржмрж┐рж╢рзНржмрж╕рзНржд рж╕ржЩрзНржЧрзА",
            select_location: "ЁЯУН ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
            select_state: "рж░рж╛ржЬрзНржп ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
            select_city: "рж╢рж╣рж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
            live_weather: "тШАя╕П рж▓рж╛ржЗржн ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ ржкрзНрж░рждрж┐ржмрзЗржжржи",
            select_location_weather: "ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржжрзЗржЦрждрзЗ ржПржХржЯрж┐ ржЕржмрж╕рзНржерж╛ржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред",
            crop_recommendation: "ЁЯМ▒ ржлрж╕рж▓ рж╕рзБржкрж╛рж░рж┐рж╢",
            crop_suggestions: "ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржнрж┐рждрзНрждрж┐ржХ ржлрж╕рж▓рзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржПржЦрж╛ржирзЗ ржкрзНрж░ржжрж░рзНрж╢рж┐ржд рж╣ржмрзЗред",
            your_crop_info: "ЁЯМ╛ ржЖржкржирж╛рж░ ржлрж╕рж▓ р▓ор▓╛р▓╣р▓┐р▓др▓┐",
            what_crop: "ржЖржкржирж┐ ржХрзЛржи ржлрж╕рж▓ рж░рзЛржкржг ржХрж░рзЗржЫрзЗржи?",
            get_advice: "ржкрд░рд╛рдорж░рзНрж╢ ржкрж╛ржи",
            fetching_weather: "ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ рждржерзНржп ржЖржирж╛ рж╣ржЪрзНржЫрзЗ...",
            recommended_crops: "ржмрж░рзНрждржорж╛ржи ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрж╛ржмрж┐ржд ржлрж╕рж▓:",
            no_crops: "ржмрж░рзНрждржорж╛ржи ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ ржЬржирзНржп ржХрзЛржи ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржлрж╕рж▓ рж╕рзБржкрж╛рж░рж┐рж╢ ржирзЗржЗред"
        },
        mr: { // Marathi
            title: "рдЕтАНреЕрдЧреНрд░реЛрд╡реЗрджрд░ рдЗрдВрдбрд┐рдпрд╛",
            subtitle: "рд╢реЗрддреАрдд рддреБрдордЪрд╛ рд╡рд┐рд╢реНрд╡рд╛рд╕реВ рднрд╛рдЧреАрджрд╛рд░",
            select_location: "ЁЯУН рддреБрдордЪреЗ рд╕реНрдерд╛рди рдирд┐рд╡рдбрд╛",
            select_state: "рд░рд╛рдЬреНрдп рдирд┐рд╡рдбрд╛",
            select_city: "рд╢рд╣рд░ рдирд┐рд╡рдбрд╛",
            live_weather: "тШАя╕П рдереЗрдЯ рд╣рд╡рд╛рдорд╛рди рдЕрд╣рд╡рд╛рд▓",
            select_location_weather: "рд╣рд╡рд╛рдорд╛рди рдкрд╛рд╣рдгреНрдпрд╛рд╕рд╛рдареА рдПрдХ рд╕реНрдерд╛рди рдирд┐рд╡рдбрд╛.",
            crop_recommendation: "ЁЯМ▒ рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╕",
            crop_suggestions: " рд╣рд╡рд╛рдорд╛рдирд╛рд╡рд░ рдЖрдзрд╛рд░рд┐рдд рдкреАрдХ рд╕реВрдЪрдирд╛ рдпреЗрдереЗ рджрд┐рд╕рддреАрд▓.",
            your_crop_info: "ЁЯМ╛ рддреБрдордЪреА рдкреАрдХ рдорд╛рд╣рд┐рддреА",
            what_crop: "рддреБрдореНрд╣реА рдХреЛрдгрддреЗ рдкреАрдХ рд▓рд╛рд╡рд▓реЗ рдЖрд╣реЗ?",
            get_advice: "рд╕рд▓реНрд▓рд╛ рдШреНрдпрд╛",
            fetching_weather: "рд╣рд╡рд╛рдорд╛рди рдорд╛рд╣рд┐рддреА рдЖрдгрдд рдЖрд╣реЗ...",
            recommended_crops: "рд╕рдзреНрдпрд╛рдЪреНрдпрд╛ рд╣рд╡рд╛рдорд╛рдирд╛рд╕рд╛рдареА рд╢рд┐рдлрд╛рд░рд╕ рдХреЗрд▓реЗрд▓реА рдкрд┐рдХреЗ:",
            no_crops: "рд╕рдзреНрдпрд╛рдЪреНрдпрд╛ рд╣рд╡рд╛рдорд╛рдирд╛рд╕рд╛рдареА рдХреЛрдгрддреНрдпрд╛рд╣реА рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╕реА рдирд╛рд╣реАрдд."
        },
        te: { // Telugu
            title: "р░Ер░Чр▒Нр░░р▒Лр░╡р▒Жр░жр░░р▒Н р░Зр░Вр░бр░┐р░пр░╛",
            subtitle: "р░╡р▒Нр░пр░╡р░╕р░╛р░пр░Вр░▓р▒Л р░ор▒А р░ир░ор▒Нр░ор░Хр░ор▒Ир░и р░нр░╛р░Чр░╕р▒Нр░╡р░╛р░ор░┐",
            select_location: "ЁЯУН р░ор▒А р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
            select_state: "р░░р░╛р░╖р▒Нр░Яр▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
            select_city: "р░ир░Чр░░р░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
            live_weather: "тШАя╕П р░кр▒Нр░░р░др▒Нр░пр░Хр▒Нр░╖ р░╡р░╛р░др░╛р░╡р░░р░г р░ир░┐р░╡р▒Зр░жр░┐р░Х",
            select_location_weather: "р░╡р░╛р░др░╛р░╡р░░р░гр░В р░Ър▒Вр░бр░Яр░╛р░ир░┐р░Хр░┐ р░Тр░Х р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐.",
            crop_recommendation: "ЁЯМ▒ р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б",
            crop_suggestions: "р░╡р░╛р░др░╛р░╡р░░р░г р░Жр░зр░╛р░░р░┐р░д р░кр░Вр░Я р░╕р▒Вр░Ър░ир░▓р▒Б р░Зр░Хр▒Нр░Хр░б р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др░╛р░пр░┐.",
            your_crop_info: "ЁЯМ╛ р░ор▒А р░кр░Вр░Я р░╕р░ор░╛р░Ър░╛р░░р░В",
            what_crop: "р░ор▒Ар░░р▒Б р░П р░кр░Вр░Яр░ир▒Б р░ир░╛р░Яр░╛р░░р▒Б?",
            get_advice: "р░╕р░▓р░╣р░╛ р░кр▒Кр░Вр░жр░Вр░бр░┐",
            fetching_weather: "р░╡р░╛р░др░╛р░╡р░░р░г р░╕р░ор░╛р░Ър░╛р░░р░В р░кр▒Кр░Вр░жр▒Бр░др▒Лр░Вр░жр░┐...",
            recommended_crops: "р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░╡р░╛р░др░╛р░╡р░░р░гр░╛р░ир░┐р░Хр░┐ р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░Ър▒Зр░пр░мр░бр░┐р░и р░кр░Вр░Яр░▓р▒Б:",
            no_crops: "р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░╡р░╛р░др░╛р░╡р░░р░гр░╛р░ир░┐р░Хр░┐ р░ир░┐р░░р▒Нр░жр░┐р░╖р▒Нр░Я р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б р░▓р▒Зр░╡р▒Б."
        },
        ta: { // Tamil
            title: "роЕроХрпНро░рпЛро╡рпЖродро░рпН роЗроирпНродро┐ропро╛",
            subtitle: "ро╡ро┐ро╡роЪро╛ропродрпНродро┐ро▓рпН роЙроЩрпНроХро│рпН роироорпНрокроХрооро╛рой роХрпВроЯрпНроЯро╛ро│ро░рпН",
            select_location: "ЁЯУН роЙроЩрпНроХро│рпН роЗро░рпБрокрпНрокро┐роЯродрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
            select_state: "рооро╛роиро┐ро▓родрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
            select_city: "роироХро░родрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
            live_weather: "тШАя╕П роирпЗро░роЯро┐ ро╡ро╛ройро┐ро▓рпИ роЕро▒ро┐роХрпНроХрпИ",
            select_location_weather: "ро╡ро╛ройро┐ро▓рпИропрпИрокрпН рокро╛ро░рпНроХрпНроХ роТро░рпБ роЗроЯродрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.",
            crop_recommendation: "ЁЯМ▒ рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ",
            crop_suggestions: "ро╡ро╛ройро┐ро▓рпИ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН роЗроЩрпНроХрпЗ родрпЛройрпНро▒рпБроорпН.",
            your_crop_info: "ЁЯМ╛ роЙроЩрпНроХро│рпН рокропро┐ро░рпН родроХро╡ро▓рпН",
            what_crop: "роирпАроЩрпНроХро│рпН роОройрпНрой рокропро┐ро░рпН роироЯрпНроЯрпБро│рпНро│рпАро░рпНроХро│рпН?",
            get_advice: "роЖро▓рпЛроЪройрпИ рокрпЖро▒рпБроЩрпНроХро│рпН",
            fetching_weather: "ро╡ро╛ройро┐ро▓рпИ родроХро╡ро▓рпН рокрпЖро▒рокрпНрокроЯрпБроХро┐ро▒родрпБ...",
            recommended_crops: "родро▒рпНрокрпЛродрпИроп ро╡ро╛ройро┐ро▓рпИроХрпНроХро╛рой рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ рокропро┐ро░рпНроХро│рпН:",
            no_crops: "родро▒рпНрокрпЛродрпИроп ро╡ро╛ройро┐ро▓рпИроХрпНроХрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН роОродрпБро╡рпБроорпН роЗро▓рпНро▓рпИ."
        },
        gu: { // Gujarati
            title: "ркПркЧрлНрк░рлЛрк╡рлЗркзрк░ ркЗркирлНркбрк┐ркпрк╛",
            subtitle: "ркЦрлЗркдрлАркорк╛ркВ ркдркорк╛рк░рк╛ рк╡рк┐рк╢рлНрк╡рк╛рк╕рлБ ркнрк╛ркЧрлАркжрк╛рк░",
            select_location: "ЁЯУН ркдркорк╛рк░рлБркВ рк╕рлНркерк╛рки рккрк╕ркВркж ркХрк░рлЛ",
            select_state: "рк░рк╛ркЬрлНркп рккрк╕ркВркж ркХрк░рлЛ",
            select_city: "рк╢рк╣рлЗрк░ рккрк╕ркВркж ркХрк░рлЛ",
            live_weather: "тШАя╕П ркЬрлАрк╡ркВркд рк╣рк╡рк╛ркорк╛рки ркЕрк╣рлЗрк╡рк╛рк▓",
            select_location_weather: "рк╣рк╡рк╛ркорк╛рки ркЬрлЛрк╡рк╛ ркорк╛ркЯрлЗ ркПркХ рк╕рлНркерк╛рки рккрк╕ркВркж ркХрк░рлЛ.",
            crop_recommendation: "ЁЯМ▒ рккрк╛ркХркирлА ркнрк▓рк╛ркоркг",
            crop_suggestions: "рк╣рк╡рк╛ркорк╛рки ркЖркзрк╛рк░рк┐ркд рккрк╛ркХ рк╕рлВркЪркирлЛ ркЕрк╣рлАркВ ркжрлЗркЦрк╛рк╢рлЗ.",
            your_crop_info: "ЁЯМ╛ ркдркорк╛рк░рлА рккрк╛ркХркирлА ркорк╛рк╣рк┐ркдрлА",
            what_crop: "ркдркорлЗ ркХркпрлЛ рккрк╛ркХ рк╡рк╛рк╡рлНркпрлЛ ркЫрлЗ?",
            get_advice: "рк╕рк▓рк╛рк╣ ркорлЗрк│рк╡рлЛ",
            fetching_weather: "рк╣рк╡рк╛ркорк╛рки ркорк╛рк╣рк┐ркдрлА ркорлЗрк│рк╡рлА рк░рк╣рлА ркЫрлЗ...",
            recommended_crops: "рк╡рк░рлНркдркорк╛рки рк╣рк╡рк╛ркорк╛рки ркорк╛ркЯрлЗ ркнрк▓рк╛ркоркг ркХрк░рлЗрк▓ рккрк╛ркХ:",
            no_crops: "рк╡рк░рлНркдркорк╛рки рк╣рк╡рк╛ркорк╛рки ркорк╛ркЯрлЗ ркХрлЛркИ рк╡рк┐рк╢рк┐рк╖рлНркЯ рккрк╛ркХ ркнрк▓рк╛ркоркгрлЛ ркиркерлА."
        },
        ur: { // Urdu
            title: "╪з█М┌п╪▒┘И ┘И█М╪п╪▒ ╪з┘Ж┌И█М╪з",
            subtitle: "┌й┌╛█М╪к█М ╪и╪з┌С█М ┘Е█М┌║ ╪в┘╛ ┌й╪з ┘В╪з╪и┘Д ╪з╪╣╪к┘Е╪з╪п ╪│╪з╪к┌╛█М",
            select_location: "ЁЯУН ╪з┘╛┘Ж╪з ┘Е┘В╪з┘Е ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
            select_state: "╪▒█М╪з╪│╪к ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
            select_city: "╪┤█Б╪▒ ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
            live_weather: "тШАя╕П ╪и╪▒╪з█Б ╪▒╪з╪│╪к ┘Е┘И╪│┘Е ┌й█М ╪▒┘╛┘И╪▒┘╣",
            select_location_weather: "┘Е┘И╪│┘Е ╪п█М┌й┌╛┘Ж█Т ┌й█Т ┘Д█М█Т ╪з█М┌й ┘Е┘В╪з┘Е ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║█Ф",
            crop_recommendation: "ЁЯМ▒ ┘Б╪╡┘Д ┌й█М ╪│┘Б╪з╪▒╪┤",
            crop_suggestions: "┘Е┘И╪│┘Е ┘╛╪▒ ┘Е╪и┘Ж█М ┘Б╪╡┘Д ┌й█М ╪к╪м╪з┘И█М╪▓ █М█Б╪з┌║ ╪╕╪з█Б╪▒ █Б┘И┌║ ┌п█М█Ф",
            your_crop_info: "ЁЯМ╛ ╪в┘╛ ┌й█М ┘Б╪╡┘Д ┌й█М ┘Е╪╣┘Д┘И┘Е╪з╪к",
            what_crop: "╪в┘╛ ┘Ж█Т ┌й┘И┘Ж ╪│█М ┘Б╪╡┘Д ┘Д┌п╪з╪ж█М █Б█Т╪Я",
            get_advice: "┘Е╪┤┘И╪▒█Б ┘Д█М┌║",
            fetching_weather: "┘Е┘И╪│┘Е ┌й█М ┘Е╪╣┘Д┘И┘Е╪з╪к ╪н╪з╪╡┘Д ┌й█М ╪м╪з ╪▒█Б█М █Б█М┌║█Ф..",
            recommended_crops: "┘Е┘И╪м┘И╪п█Б ┘Е┘И╪│┘Е ┌й█Т ┘Д█М█Т ╪к╪м┘И█М╪▓ ┌й╪▒╪п█Б ┘Б╪╡┘Д█М┌║:",
            no_crops: "┘Е┘И╪м┘И╪п█Б ┘Е┘И╪│┘Е ┌й█Т ┘Д█М█Т ┌й┘И╪ж█М ╪о╪з╪╡ ┘Б╪╡┘Д ┌й█М ╪│┘Б╪з╪▒╪┤╪з╪к ┘Ж█Б█М┌║ █Б█М┌║█Ф"
        },
        kn: { // Kannada
            title: "р▓Ер▓Чр│Нр▓░р│Лр▓╡р│Жр▓жр▓░р│Н р▓Зр▓Вр▓бр▓┐р▓пр▓╛",
            subtitle: "р▓Хр│Гр▓╖р▓┐р▓пр▓▓р│Нр▓▓р▓┐ р▓ир▓┐р▓ор│Нр▓о р▓╡р▓┐р▓╢р│Нр▓╡р▓╛р▓╕р▓╛р▓░р│Нр▓╣ р▓кр▓╛р▓▓р│Бр▓жр▓╛р▓░",
            select_location: "ЁЯУН р▓ир▓┐р▓ор│Нр▓о р▓╕р│Нр▓ер▓│р▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐",
            select_state: "р▓░р▓╛р▓Ьр│Нр▓пр▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐",
            select_city: "р▓ир▓Чр▓░р▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐",
            live_weather: "тШАя╕П р░кр▒Нр░░р░др▒Нр░пр░Хр▒Нр░╖ р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓╡р▓░р▓жр▓┐",
            select_location_weather: "р▓╣р▓╡р▓╛р▓ор▓╛р▓ир▓╡р▓ир│Нр▓ир│Б р▓ир│Лр▓бр▓▓р│Б р░Тр░Х р▓╕р│Нр▓ер▓│р▓╡р▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐.",
            crop_recommendation: "ЁЯМ▒ р▓мр│Жр▓│р│Ж р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б",
            crop_suggestions: "р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓Жр▓зр▓╛р▓░р▓┐р▓д р▓мр│Жр▓│р│Ж р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б р▓Зр▓▓р│Нр▓▓р▓┐ р▓Хр▓╛р▓гр▓┐р▓╕р│Бр▓др│Нр▓др▓╡р│Ж.",
            your_crop_info: "ЁЯМ╛ р▓ир▓┐р▓ор│Нр▓о р▓мр│Жр▓│р│Ж р▓ор▓╛р▓╣р▓┐р▓др▓┐",
            what_crop: "р▓ир│Ар▓╡р│Б р▓пр▓╛р▓╡ р▓мр│Жр▓│р│Жр▓пр▓ир│Нр▓ир│Б р▓ир│Жр▓Яр│Нр▓Яр▓┐р▓жр│Нр▓жр│Ар▓░р▓┐?",
            get_advice: "р▓╕р▓▓р▓╣р│Ж р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐",
            fetching_weather: "р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ор▓╛р▓╣р▓┐р▓др▓┐р▓пр▓ир│Нр▓ир│Б р▓др▓░р▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓жр│Ж...",
            recommended_crops: "р▓кр│Нр▓░р▓╕р│Нр▓др│Бр▓д р▓╣р▓╡р▓╛р▓ор▓╛р▓ир▓Хр│Нр▓Хр▓╛р▓Чр▓┐ р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б р▓ор▓╛р▓бр▓▓р▓╛р▓ж р▓мр│Жр▓│р│Жр▓Чр▓│р│Б:",
            no_crops: "р▓кр│Нр▓░р▓╕р│Нр▓др│Бр▓д р▓╣р▓╡р▓╛р▓ор▓╛р▓ир▓Хр│Нр▓Хр│Ж р▓пр▓╛р▓╡р│Бр▓жр│З р▓ир▓┐р▓░р│Нр▓жр▓┐р▓╖р│Нр▓Я р▓мр│Жр▓│р│Ж р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р▓┐р▓▓р│Нр▓▓."
        }
    };

    const indianStatesAndCities = {
        "Andhra Pradesh": ["Visakhapatnam", "Vijayawada", "Guntur", "Tirupati", "Nellore"],
        "Arunachal Pradesh": ["Itanagar", "Tawang", "Ziro", "Bomdila"],
        "Assam": ["Guwahati", "Dibrugarh", "Silchar", "Jorhat"],
        "Bihar": ["Patna", "Gaya", "Bhagalpur", "Muzaffarpur"],
        "Chhattisgarh": ["Raipur", "Bhilai", "Bilaspur", "Korba"],
        "Goa": ["Panaji", "Margao", "Vasco da Gama", "Mapusa"],
        "Gujarat": ["Ahmedabad", "Surat", "Vadodara", "Rajkot"],
        "Haryana": ["Faridabad", "Gurugram", "Panipat", "Ambala"],
        "Himachal Pradesh": ["Shimla", "Manali", "Dharamshala", "Kullu"],
        "Jharkhand": ["Ranchi", "Jamshedpur", "Dhanbad", "Bokaro"],
        "Karnataka": ["Bengaluru", "Mysuru", "Hubballi", "Mangaluru"],
        "Kerala": ["Thiruvananthapuram", "Kochi", "Kozhikode", "Thrissur"],
        "Madhya Pradesh": ["Bhopal", "Indore", "Jabalpur", "Gwalior"],
        "Maharashtra": ["Mumbai", "Pune", "Nagpur", "Nashik"],
        "Manipur": ["Imphal", "Bishnupur", "Churachandpur", "Thoubal"],
        "Meghalaya": ["Shillong", "Tura", "Jowai", "Nongpoh"],
        "Mizoram": ["Aizawl", "Lunglei", "Champhai", "Serchhip"],
        "Nagaland": ["Kohima", "Dimapur", "Mokokchung", "Wokha"],
        "Odisha": ["Bhubaneswar", "Cuttack", "Rourkela", "Puri"],
        "Punjab": ["Ludhiana", "Amritsar", "Jalandhar", "Patiala"],
        "Rajasthan": ["Jaipur", "Jodhpur", "Udaipur", "Kota"],
        "Sikkim": ["Gangtok", "Namchi", "Gyalshing", "Mangan"],
        "Tamil Nadu": ["Chennai", "Coimbatore", "Madurai", "Tiruchirappalli"],
        "Telangana": ["Hyderabad", "Warangal", "Nizamabad", "Karimnagar"],
        "Tripura": ["Agartala", "Udaipur", "Dharmanagar", "Kailasahar"],
        "Uttar Pradesh": ["Lucknow", "Kanpur", "Agra", "Varanasi"],
        "Uttarakhand": ["Dehradun", "Haridwar", "Nainital", "Rishikesh"],
        "West Bengal": ["Kolkata", "Howrah", "Durgapur", "Asansol"]
    };

    const cropDatabase = [
        { name: "Rice", ideal_temp: [20, 37], ideal_condition: ["Rain", "Clouds", "Drizzle"] },
        { name: "Wheat", ideal_temp: [10, 25], ideal_condition: ["Clear", "Clouds"] },
        { name: "Cotton", ideal_temp: [21, 35], ideal_condition: ["Clear"] },
        { name: "Sugarcane", ideal_temp: [20, 30], ideal_condition: ["Clear", "Rain"] },
        { name: "Maize", ideal_temp: [21, 27], ideal_condition: ["Clear", "Clouds"] },
        { name: "Potato", ideal_temp: [15, 25], ideal_condition: ["Clear", "Clouds"] },
        { name: "Soybean", ideal_temp: [25, 32], ideal_condition: ["Clear", "Clouds"] },
        { name: "Mustard", ideal_temp: [10, 25], ideal_condition: ["Clear", "Clouds"] }
    ];

    // Populate states
    for (const state in indianStatesAndCities) {
        const option = document.createElement('option');
        option.value = state;
        option.textContent = state;
        stateSelect.appendChild(option);
    }

    // Handle state change
    stateSelect.addEventListener('change', () => {
        const selectedState = stateSelect.value;
        const cities = indianStatesAndCities[selectedState] || [];
        citySelect.innerHTML = `<option value="">${translations[languageSelect.value].select_city}</option>`;
        cities.forEach(city => {
            const option = document.createElement('option');
            option.value = city;
            option.textContent = city;
            citySelect.appendChild(option);
        });
        // Clear weather and recommendations
        weatherDataContainer.innerHTML = `<p data-translate="select_location_weather">${translations[languageSelect.value].select_location_weather}</p>`;
        recommendationDataContainer.innerHTML = `<p data-translate="crop_suggestions">${translations[languageSelect.value].crop_suggestions}</p>`;
    });

    const weatherSpinner = weatherDataContainer.querySelector('.spinner');
    const recommendationSpinner = recommendationDataContainer.querySelector('.spinner');

    // Handle city change to fetch weather and recommendations
    citySelect.addEventListener('change', () => {
        const city = citySelect.value;
        if (!city) return;

        // Show spinners and hide text
        weatherSpinner.classList.remove('hidden');
        recommendationSpinner.classList.remove('hidden');
        weatherDataContainer.querySelector('p').classList.add('hidden');
        recommendationDataContainer.querySelector('p').classList.add('hidden');

        if (apiKey === "YOUR_API_KEY" || apiKey.length < 30) {
             weatherDataContainer.innerHTML = `<p style="color: red;">API Key not configured.</p>`;
             recommendationDataContainer.innerHTML = `<p style="color: red;">Cannot get recommendations without weather data.</p>`;
             return;
        }

        const weatherApiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;

        fetch(weatherApiUrl)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Weather data not found.');
                }
                return response.json();
            })
            .then(data => {
                // Hide spinners
                weatherSpinner.classList.add('hidden');
                recommendationSpinner.classList.add('hidden');

                // Display weather
                const temp = Math.round(data.main.temp);
                const condition = data.weather[0].main;
                const icon = getWeatherIcon(condition);
                weatherDataContainer.innerHTML = `<p class="weather-info">${icon} ${temp}┬░C, ${condition}</p>`;

                // Generate and display crop recommendations
                const recommendedCrops = cropDatabase.filter(crop =>
                    temp >= crop.ideal_temp[0] && temp <= crop.ideal_temp[1] && crop.ideal_condition.includes(condition)
                );

                if (recommendedCrops.length > 0) {
                    let recommendationHtml = `<h5>${translations[languageSelect.value].recommended_crops}</h5><ul>`;
                    recommendedCrops.forEach(crop => {
                        recommendationHtml += `<li>${crop.name}</li>`;
                    });
                    recommendationHtml += '</ul>';
                    recommendationDataContainer.innerHTML = recommendationHtml;
                } else {
                    recommendationDataContainer.innerHTML = `<p>${translations[languageSelect.value].no_crops}</p>`;
                }
            })
            .catch(error => {
                // Hide spinners
                weatherSpinner.classList.add('hidden');
                recommendationSpinner.classList.add('hidden');

                weatherDataContainer.innerHTML = `<p style="color: red;">${error.message}</p>`;
                recommendationDataContainer.innerHTML = `<p style-color: red;>Could not fetch recommendations.</p>`;
            });
    });


    const getHyperlocalForecastButton = document.getElementById('get-hyperlocal-forecast');
    const hyperlocalDataContainer = document.getElementById('hyperlocal-data');

    // Handle "Get Hyperlocal Forecast" button click
    getHyperlocalForecastButton.addEventListener('click', () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(position => {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;

                // Call the placeholder API
                fetch(`http://127.0.0.1:5000/predict?lat=${lat}&lon=${lon}`)
                    .then(response => response.json())
                    .then(data => {
                        let forecastHtml = '<h5>Your Hyperlocal Forecast:</h5><ul>';
                        data.forecast.forEach(day => {
                            forecastHtml += `<li><strong>${day.day}:</strong> ${day.condition}, ${day.temp_max}┬░C / ${day.temp_min}┬░C</li>`;
                        });
                        forecastHtml += '</ul>';
                        hyperlocalDataContainer.innerHTML = forecastHtml;
                    })
                    .catch(error => {
                        hyperlocalDataContainer.innerHTML = `<p style="color: red;">Could not fetch hyperlocal forecast.</p>`;
                        console.error('Error fetching hyperlocal forecast:', error);
                    });
            });
        } else {
            hyperlocalDataContainer.innerHTML = `<p style="color: red;">Geolocation is not supported by this browser.</p>`;
        }
    });

    // Handle "Get Advice" button click
    submitCropButton.addEventListener('click', () => {
        const plantedCrop = plantedCropInput.value;
        const selectedCity = citySelect.value;

        if (plantedCrop.trim() === '') {
            nextStepsDiv.innerHTML = '<p style="color: red;">Please enter the crop you have planted.</p>';
            return;
        }

        if (selectedCity === '') {
            nextStepsDiv.innerHTML = '<p style="color: red;">Please select a city first.</p>';
            return;
        }

        window.location.href = `advice.html?crop=${encodeURIComponent(plantedCrop)}&city=${encodeURIComponent(selectedCity)}`;
    });

    // Handle language change
    languageSelect.addEventListener('change', () => {
        const lang = languageSelect.value;
        document.querySelectorAll('[data-translate]').forEach(el => {
            const key = el.getAttribute('data-translate');
            if (translations[lang] && translations[lang][key]) {
                el.textContent = translations[lang][key];
            }
        });
    });

    function getWeatherIcon(condition) {
        switch (condition) {
            case 'Clear': return 'тШАя╕П';
            case 'Clouds': return 'тШБя╕П';
            case 'Rain': return 'ЁЯМзя╕П';
            case 'Drizzle': return 'ЁЯМжя╕П';
            case 'Thunderstorm': return 'тЫИя╕П';
            case 'Snow': return 'тЭДя╕П';
            default: return 'ЁЯМля╕П';
        }
    }

    console.log("script.js loaded");
});